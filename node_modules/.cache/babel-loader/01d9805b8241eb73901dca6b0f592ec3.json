{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Adeola.bamigboye\\\\Desktop\\\\generation\\\\client\\\\src\\\\components\\\\payment\\\\HomePayment.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from 'axios'; // MUI Components\n\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport TextField from '@material-ui/core/TextField'; // stripe\n\nimport { useStripe, useElements, CardElement } from '@stripe/react-stripe-js'; // Util imports\n\nimport { makeStyles } from '@material-ui/core/styles'; // Custom Components\n\nimport CardInput from './CardInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles({\n  content: {\n    display: 'flex',\n    flexDirection: 'column',\n    alignContent: 'flex-start'\n  },\n  div: {\n    display: 'flex',\n    flexDirection: 'row',\n    alignContent: 'flex-start',\n    justifyContent: 'space-between'\n  },\n  button: {\n    margin: '2em auto 1em'\n  }\n});\n\nconst HomePayment = () => {\n  _s();\n\n  const classes = useStyles(); // State\n\n  const [email, setEmail] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const handleSubmitSub = async event => {\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    const result = await stripe.createPaymentMethod({\n      type: 'card',\n      card: elements.getElement(CardElement),\n      billing_details: {\n        email: email\n      }\n    });\n\n    if (result.error) {\n      console.log(result.error.message);\n    } else {\n      const res = await axios.post('/sub', {\n        'payment_method': result.paymentMethod.id,\n        'email': email\n      }); // eslint-disable-next-line camelcase\n\n      const {\n        client_secret,\n        status\n      } = res.data;\n\n      if (status === 'requires_action') {\n        stripe.confirmCardPayment(client_secret).then(function (result) {\n          if (result.error) {\n            console.log('There was an issue!');\n            console.log(result.error); // Display error message in your UI.\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\n          } else {\n            console.log('You got the money!'); // Show a success message to your customer\n          }\n        });\n      } else {\n        console.log('You got the money!'); // No additional information was needed\n        // Show a success message to your customer\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(CardContent, {\n      className: classes.content,\n      children: [/*#__PURE__*/_jsxDEV(CardInput, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.div,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          color: \"primary\",\n          className: classes.button,\n          onClick: handleSubmitSub,\n          children: \"Subscribe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HomePayment, \"+1QP9gyRLhPcy9WS6AY1xzDMBKo=\", false, function () {\n  return [useStyles, useStripe, useElements];\n});\n\n_c = HomePayment;\nexport default HomePayment;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePayment\");","map":{"version":3,"sources":["C:/Users/Adeola.bamigboye/Desktop/generation/client/src/components/payment/HomePayment.js"],"names":["React","useState","axios","Button","Card","CardContent","TextField","useStripe","useElements","CardElement","makeStyles","CardInput","useStyles","content","display","flexDirection","alignContent","div","justifyContent","button","margin","HomePayment","classes","email","setEmail","stripe","elements","handleSubmitSub","event","result","createPaymentMethod","type","card","getElement","billing_details","error","console","log","message","res","post","paymentMethod","id","client_secret","status","data","confirmCardPayment","then","root"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\r\nimport axios from 'axios';\r\n// MUI Components\r\nimport Button from '@material-ui/core/Button';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport TextField from '@material-ui/core/TextField';\r\n// stripe\r\nimport {useStripe, useElements, CardElement} from '@stripe/react-stripe-js';\r\n// Util imports\r\nimport {makeStyles} from '@material-ui/core/styles';\r\n// Custom Components\r\nimport CardInput from './CardInput';\r\n\r\nconst useStyles = makeStyles({\r\n  \r\n  content: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignContent: 'flex-start',\r\n  },\r\n  div: {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    alignContent: 'flex-start',\r\n    justifyContent: 'space-between',\r\n  },\r\n  button: {\r\n    margin: '2em auto 1em',\r\n  },\r\n});\r\n\r\nconst HomePayment = () => {\r\n  const classes = useStyles();\r\n  // State\r\n  const [email, setEmail] = useState('');\r\n\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  \r\n  const handleSubmitSub = async (event) => {\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card: elements.getElement(CardElement),\r\n      billing_details: {\r\n        email: email,\r\n      },\r\n    });\r\n\r\n    if (result.error) {\r\n      console.log(result.error.message);\r\n    } else {\r\n      const res = await axios.post('/sub', {'payment_method': result.paymentMethod.id, 'email': email});\r\n      // eslint-disable-next-line camelcase\r\n      const {client_secret, status} = res.data;\r\n\r\n      if (status === 'requires_action') {\r\n        stripe.confirmCardPayment(client_secret).then(function(result) {\r\n          if (result.error) {\r\n            console.log('There was an issue!');\r\n            console.log(result.error);\r\n            // Display error message in your UI.\r\n            // The card was declined (i.e. insufficient funds, card has expired, etc)\r\n          } else {\r\n            console.log('You got the money!');\r\n            // Show a success message to your customer\r\n          }\r\n        });\r\n      } else {\r\n        console.log('You got the money!');\r\n        // No additional information was needed\r\n        // Show a success message to your customer\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className={classes.root}>\r\n      <CardContent className={classes.content}>\r\n        {/* <TextField\r\n          label='Email'\r\n          id='outlined-email-input'\r\n          helperText={`Email you'll recive updates and receipts on`}\r\n          margin='normal'\r\n          variant='outlined'\r\n          type='email'\r\n          required\r\n          value={email}\r\n          onChange={(e) => setEmail(e.target.value)}\r\n          fullWidth\r\n        /> */}\r\n        <CardInput />\r\n        <div className={classes.div}>\r\n          \r\n          <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={handleSubmitSub}>\r\n            Subscribe\r\n          </Button>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default HomePayment;\r\n"]},"metadata":{},"sourceType":"module"}